@page "/payments"
@using AccountingPro.Application.DTOs
@using AccountingPro.Application.Services
@using AccountingPro.Core.Enums
@inject IPaymentService PaymentService
@inject ICompanyContextService CompanyContext
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
<PageTitle>Payments - AccountingPro</PageTitle>
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Payments & Receipts</h1>
    <a href="/payments/receipt/create" class="btn btn-primary">
        <i class="fas fa-plus"></i>
        New Receipt
    </a>
</div>
<!-- Payment Statistics -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon invoices">
                <i class="fas fa-receipt"></i>
            </div>
            <div class="stat-content">
                <h3>@_payments.Count</h3>
                <p>Total Payments</p>
                <small>All time</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon revenue">
                <i class="fas fa-dollar-sign"></i>
            </div>
            <div class="stat-content">
                <h3>@_payments.Sum(p => p.Amount).ToString("C")</h3>
                <p>Total Received</p>
                <small>All payments</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon profit">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="stat-content">
                <h3>@_payments.Count(p => p.Status == PaymentStatus.Completed)</h3>
                <p>Completed</p>
                <small>Successfully processed</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon expenses">
                <i class="fas fa-calendar-alt"></i>
            </div>
            <div class="stat-content">
                <h3>@_payments.Count(p => p.PaymentDate >= DateTime.Today.AddDays(-30))</h3>
                <p>This Month</p>
                <small>Last 30 days</small>
            </div>
        </div>
    </div>
</div>
<!-- Filters -->
<div class="row mb-3">
    <div class="col-md-3">
        <input
            type="text"
            class="form-control"
            placeholder="Search payments..."
            @bind="searchTerm"
            @bind:event="oninput"
            @bind:after="FilterPayments" />
    </div>
    <div class="col-md-2">
        <select
            class="form-control"
            @bind="selectedStatus"
            @bind:after="FilterPayments">
            <option value="">All Status</option>
            <option value="@PaymentStatus.Completed">Completed</option>
            <option value="@PaymentStatus.Pending">Pending</option>
            <option value="@PaymentStatus.Failed">Failed</option>
            <option value="@PaymentStatus.Cancelled">Cancelled</option>
        </select>
    </div>
    <div class="col-md-2">
        <select
            class="form-control"
            @bind="selectedMethod"
            @bind:after="FilterPayments">
            <option value="">All Methods</option>
            <option value="@PaymentMethod.Cash">Cash</option>
            <option value="@PaymentMethod.CreditCard">Credit Card</option>
            <option value="@PaymentMethod.Check">Check</option>
            <option value="@PaymentMethod.BankTransfer">Bank Transfer</option>
            <option value="@PaymentMethod.Other">Other</option>
        </select>
    </div>
    <div class="col-md-2">
        <input
            type="date"
            class="form-control"
            @bind="fromDate"
            @bind:after="FilterPayments"
            placeholder="From Date" />
    </div>
    <div class="col-md-2">
        <input
            type="date"
            class="form-control"
            @bind="toDate"
            @bind:after="FilterPayments"
            placeholder="To Date" />
    </div>
    <div class="col-md-1">
        <select
            class="form-control"
            @bind="itemsPerPage"
            @bind:after="ResetPagination">
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
            <option value="100">100</option>
        </select>
    </div>
</div>
@if (_isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!_payments.Any())
{
    <div class="card">
        <div class="card-body text-center py-5">
            <i class="bi bi-receipt" style="font-size: 3rem; color: #ccc;"></i>
            <h5 class="mt-3">No payments recorded</h5>
            <p class="text-muted">Start by creating a payment receipt</p>
            <a href="/payments/receipt/create" class="btn btn-primary">
                Create Payment Receipt
            </a>
        </div>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                        <tr>
                            <th>Date</th>
                            <th>Payment #</th>
                            <th>Customer</th>
                            <th>Invoice #</th>
                            <th>Method</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Reference</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var payment in paginatedPayments)
                        {
                            <tr>
                                <td>
                                @payment.PaymentDate.ToString("yyyy-MM-dd")
                                </td>
                                <td>
                                    <strong>
                                    @payment.PaymentNumber
                                    </strong>
                                </td>
                                <td>
                                @payment.CustomerName
                                </td>
                                <td>
                                @payment.InvoiceNumber
                                </td>
                                <td>
                                    <span class="badge badge-@GetMethodColor(payment.PaymentMethod)">
                                        @payment.PaymentMethod.ToString()
                                    </span>
                                </td>
                                <td>
                                    <strong>@payment.Amount.ToString("C")</strong>
                                </td>
                                <td>
                                    <span class="badge badge-@GetStatusColor(payment.Status)">
                                        @payment.Status.ToString()
                                    </span>
                                </td>
                                <td>
                                @payment.Reference
                                </td>
                                <td>
                                    <a
                                        href="/payments/receipt/print/@payment.Id"
                                        class="btn btn-sm btn-outline-primary me-1"
                                        title="Print Receipt">
                                        <i class="bi bi-printer"></i>
                                    </a>
                                    <button
                                        class="btn btn-sm btn-outline-danger"
                                        @onclick="() => DeletePayment(payment.Id)"
                                        title="Delete">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
    <!-- Pagination -->
    @if (totalPages > 1)
    {
        <nav aria-label="Payment pagination" class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button
                        class="page-link"
                        @onclick="() => ChangePage(1)"
                        disabled="@(currentPage == 1)">
                        First
                    </button>
                </li>
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button
                        class="page-link"
                        @onclick="() => ChangePage(currentPage - 1)"
                        disabled="@(currentPage == 1)">
                        Previous
                    </button>
                </li>
                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(pageNumber)">
                            @pageNumber
                        </button>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button
                        class="page-link"
                        @onclick="() => ChangePage(currentPage + 1)"
                        disabled="@(currentPage == totalPages)">
                        Next
                    </button>
                </li>
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button
                        class="page-link"
                        @onclick="() => ChangePage(totalPages)"
                        disabled="@(currentPage == totalPages)">
                        Last
                    </button>
                </li>
            </ul>
        </nav>
        <div class="text-center text-muted">
            <small>
                Showing @((currentPage - 1) * itemsPerPage + 1) to @Math.Min(currentPage * itemsPerPage, filteredPayments.Count) of @filteredPayments.Count payments
            </small>
        </div>
    }
}

@code {
    private List<PaymentDto> _payments = new();
    private List<PaymentDto> filteredPayments = new();
    private List<PaymentDto> paginatedPayments = new();
    private bool _isLoading = true;

    // Filter variables
    private string searchTerm = "";
    private string selectedStatus = "";
    private string selectedMethod = "";
    private DateTime? fromDate;
    private DateTime? toDate;

    // Pagination variables
    private int currentPage = 1;
    private int itemsPerPage = 25;
    private int totalPages => (int)Math.Ceiling((double)filteredPayments.Count / itemsPerPage);

    protected override async Task OnInitializedAsync()
    {
        await CompanyContext.InitializeAsync();

        if (CompanyContext.CurrentCompanyId.HasValue)
        {
            await LoadPayments();
        }

        _isLoading = false;
    }

    private async Task LoadPayments()
    {
        try
        {
            if (CompanyContext.CurrentCompanyId.HasValue)
            {
                _payments = await PaymentService.GetPaymentsByCompanyAsync(CompanyContext.CurrentCompanyId.Value);
                FilterPayments();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading payments: {ex.Message}");
        }
    }

    private void FilterPayments()
    {
        filteredPayments = _payments.AsQueryable()
            .Where(p => string.IsNullOrWhiteSpace(searchTerm) ||
                       p.PaymentNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                       (p.CustomerName ?? "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                       (p.Reference ?? "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(p => string.IsNullOrEmpty(selectedStatus) || p.Status.ToString() == selectedStatus)
            .Where(p => string.IsNullOrEmpty(selectedMethod) || p.PaymentMethod.ToString() == selectedMethod)
            .Where(p => fromDate == null || p.PaymentDate >= fromDate)
            .Where(p => toDate == null || p.PaymentDate <= toDate)
            .OrderByDescending(p => p.PaymentDate)
            .ToList();

        currentPage = 1;
        UpdatePagination();
    }

    private void UpdatePagination()
    {
        paginatedPayments = filteredPayments
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage)
            .ToList();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            UpdatePagination();
        }
    }

    private void ResetPagination()
    {
        currentPage = 1;
        FilterPayments();
    }

    private async Task DeletePayment(int id)
    {
        if (confirm("Are you sure you want to delete this payment?"))
        {
            await PaymentService.DeletePaymentAsync(id);
            await LoadPayments();
        }
    }

    private bool confirm(string message)
    {
        // In a real app, use a modal dialog
        return true;
    }

    private string GetMethodColor(PaymentMethod method)
    {
        return method switch
        {
            PaymentMethod.Cash => "success",
            PaymentMethod.CreditCard => "primary",
            PaymentMethod.Check => "info",
            PaymentMethod.BankTransfer => "warning",
            PaymentMethod.Other => "secondary",
            _ => "secondary"
        };
    }

    private string GetStatusColor(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Completed => "success",
            PaymentStatus.Pending => "warning",
            PaymentStatus.Failed => "danger",
            PaymentStatus.Cancelled => "secondary",
            _ => "secondary"
        };
    }
}
