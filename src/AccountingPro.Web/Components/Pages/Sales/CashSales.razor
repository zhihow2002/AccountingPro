@page "/sales/cash"
@using AccountingPro.Application.DTOs
@using AccountingPro.Core.Enums
@using AccountingPro.Application.Services
@inject IPaymentService PaymentService
@inject ICompanyContextService CompanyContext
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
<PageTitle>Cash Sales - AccountingPro</PageTitle>
<!-- Page Header -->
<div class="page-header-section mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="page-header-title">
                <i class="fas fa-cash-register text-success"></i>
                Cash Sales Management
            </h1>
            <p class="page-header-subtitle">Track and manage cash sales transactions</p>
        </div>
        <a href="/sales/cash/create" class="btn btn-primary btn-lg shadow-sm">
            <i class="fas fa-plus-circle"></i>
            New Cash Sale
        </a>
    </div>
</div>
<!-- Cash Sales Statistics -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon invoices">
                <i class="fas fa-cash-register"></i>
            </div>
            <div class="stat-content">
                <h3>@cashSales.Count</h3>
                <p>Total Sales</p>
                <small>All time</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon revenue">
                <i class="fas fa-money-bill-wave"></i>
            </div>
            <div class="stat-content">
                <h3>@cashSales.Sum(s => s.Amount).ToString("C")</h3>
                <p>Total Revenue</p>
                <small>All cash sales</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon profit">
                <i class="fas fa-calendar-check"></i>
            </div>
            <div class="stat-content">
                <h3>@cashSales.Count(s => s.PaymentDate >= DateTime.Today.AddDays(-30))</h3>
                <p>This Month</p>
                <small>Last 30 days</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon expenses">
                <i class="fas fa-calendar-day"></i>
            </div>
            <div class="stat-content">
                <h3>@cashSales.Count(s => s.PaymentDate >= DateTime.Today)</h3>
                <p>Today</p>
                <small>Sales today</small>
            </div>
        </div>
    </div>
</div>
<!-- Filters -->
<div class="row mb-3">
    <div class="col-md-3">
        <input
            type="text"
            class="form-control"
            placeholder="Search by payment number or customer..."
            @bind="searchTerm"
            @bind:event="oninput"
            @bind:after="FilterSales" />
    </div>
    <div class="col-md-2">
        <select
            class="form-control"
            @bind="selectedPaymentMethod"
            @bind:after="FilterSales">
            <option value="">üí≥ All Methods</option>
            <option value="@PaymentMethod.Cash">üíµ Cash</option>
            <option value="@PaymentMethod.CreditCard">üí≥ Credit Card</option>
            <option value="@PaymentMethod.Check">üìù Check</option>
            <option value="@PaymentMethod.BankTransfer">üè¶ Bank Transfer</option>
            <option value="@PaymentMethod.Other">üìã Other</option>
        </select>
    </div>
    <div class="col-md-2">
        <select
            class="form-control"
            @bind="selectedCustomer"
            @bind:after="FilterSales">
            <option value="">üë• All Customers</option>
            @foreach (var customer in GetUniqueCustomers())
            {
                <option value="@customer.Key">
                @customer.Value
                </option>
            }
        </select>
    </div>
    <div class="col-md-2">
        <input
            type="date"
            class="form-control"
            @bind="fromDate"
            @bind:after="FilterSales" />
    </div>
    <div class="col-md-2">
        <input
            type="date"
            class="form-control"
            @bind="toDate"
            @bind:after="FilterSales" />
    </div>
    <div class="col-md-1">
        <select
            class="form-control"
            @bind="itemsPerPage"
            @bind:after="ResetPagination">
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
            <option value="100">100</option>
        </select>
    </div>
</div>

<!-- Cash Sales List -->
<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Payment #</th>
                <th>Customer</th>
                <th>Method</th>
                <th>Reference</th>
                <th>Amount</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
                <tbody>
                    @if (paginatedSales.Any())
                    {
                        @foreach (var sale in paginatedSales)
                        {
                            <tr>
                                <td>
                                    @sale.PaymentDate.ToString("MMM dd, yyyy")
                                    <br />
                                    <small class="text-muted">@sale.PaymentDate.ToString("hh:mm tt")</small>
                                </td>
                                <td>
                                    <strong>@sale.PaymentNumber</strong>
                                </td>
                                <td>
                                    @(sale.CustomerName ?? "Walk-in Customer")
                                </td>
                                <td>
                                    <span class="badge badge-@GetMethodColor(sale.PaymentMethod)">
                                        @sale.PaymentMethod
                                    </span>
                                </td>
                                <td>
                                    @(sale.Reference ?? "-")
                                </td>
                                <td>
                                    <strong>@sale.Amount.ToString("C")</strong>
                                </td>
                                <td>
                                    <span class="badge badge-@GetStatusColor(sale.Status)">
                                        @sale.Status
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button
                                            class="btn btn-sm btn-outline-primary"
                                            @onclick="() => ViewSale(sale.Id)"
                                            title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <a
                                            href="/payments/receipt/print/@sale.Id"
                                            class="btn btn-sm btn-outline-info"
                                            title="Print Receipt">
                                            <i class="fas fa-print"></i>
                                        </a>
                                        @if (sale.Status != PaymentStatus.Cancelled)
                                        {
                                            <button
                                                class="btn btn-sm btn-outline-danger"
                                                @onclick="() => CancelSale(sale.Id)"
                                                title="Cancel Sale">
                                                <i class="fas fa-ban"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center text-muted">
                                <div class="py-4">
                                    <i class="fas fa-cash-register" style="font-size: 2rem; opacity: 0.3;"></i>
                                    <p class="mt-2">No cash sales found</p>
                                    @if (searchTerm == "" && selectedPaymentMethod == "" && selectedCustomer == "")
                                    {
                                        <a href="/sales/cash/create" class="btn btn-primary">Create Your First Cash Sale</a>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
<!-- Pagination -->
@if (totalPages > 1)
{
    <div class="pagination-section mt-4">
        <div class="d-flex justify-content-between align-items-center">
            <div class="pagination-info">
                <span class="text-muted">
                    Showing <strong>@((currentPage - 1) * itemsPerPage + 1)</strong> to <strong>@Math.Min(currentPage * itemsPerPage, filteredSales.Count)</strong> of <strong>@filteredSales.Count</strong> cash sales
                </span>
            </div>
            <nav aria-label="Cash sales pagination">
                <ul class="pagination mb-0">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button
                            class="page-link"
                            @onclick="() => ChangePage(1)"
                            disabled="@(currentPage == 1)">
                            <i class="fas fa-angle-double-left"></i>
                        </button>
                    </li>
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button
                            class="page-link"
                            @onclick="() => ChangePage(currentPage - 1)"
                            disabled="@(currentPage == 1)">
                            <i class="fas fa-angle-left"></i>
                        </button>
                    </li>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePage(pageNumber)">
                                @pageNumber
                            </button>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button
                            class="page-link"
                            @onclick="() => ChangePage(currentPage + 1)"
                            disabled="@(currentPage == totalPages)">
                            <i class="fas fa-angle-right"></i>
                        </button>
                    </li>
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button
                            class="page-link"
                            @onclick="() => ChangePage(totalPages)"
                            disabled="@(currentPage == totalPages)">
                            <i class="fas fa-angle-double-right"></i>
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
}

@code {
    private List<PaymentDto> cashSales = new();
    private List<PaymentDto> filteredSales = new();
    private List<PaymentDto> paginatedSales = new();
    private string searchTerm = "";
    private string selectedPaymentMethod = "";
    private string selectedCustomer = "";
    private DateTime? fromDate;
    private DateTime? toDate;

    // Pagination
    private int currentPage = 1;
    private int itemsPerPage = 25;
    private int totalPages => (int)Math.Ceiling((double)filteredSales.Count / itemsPerPage);

    protected override async Task OnInitializedAsync()
    {
        await LoadCashSales();
    }

    private async Task LoadCashSales()
    {
        try
        {
            if (!CompanyContext.CurrentCompanyId.HasValue)
            {
                await CompanyContext.InitializeAsync();
            }

            if (CompanyContext.CurrentCompanyId.HasValue)
            {
                // Get all payments and filter for cash sales (those without InvoiceId)
                var allPayments = await PaymentService.GetPaymentsByCompanyAsync(CompanyContext.CurrentCompanyId.Value);
                cashSales = allPayments.Where(p => p.InvoiceId == null || p.InvoiceId == 0).ToList();
                filteredSales = cashSales.ToList();
                UpdatePagination();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cash sales: {ex.Message}");
            cashSales = new List<PaymentDto>();
            filteredSales = new List<PaymentDto>();
            paginatedSales = new List<PaymentDto>();
        }
    }

    private void FilterSales()
    {
        filteredSales = cashSales.Where(s =>
            (string.IsNullOrEmpty(searchTerm) ||
             s.PaymentNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             (s.CustomerName != null && s.CustomerName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
             (s.Reference != null && s.Reference.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrEmpty(selectedPaymentMethod) || s.PaymentMethod.ToString() == selectedPaymentMethod) &&
            (string.IsNullOrEmpty(selectedCustomer) || (s.CustomerId.HasValue && s.CustomerId.ToString() == selectedCustomer)) &&
            (fromDate == null || s.PaymentDate >= fromDate) &&
            (toDate == null || s.PaymentDate <= toDate)
        ).ToList();

        currentPage = 1; // Reset to first page when filtering
        UpdatePagination();
    }

    private void UpdatePagination()
    {
        paginatedSales = filteredSales
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage)
            .ToList();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            UpdatePagination();
        }
    }

    private void ResetPagination()
    {
        currentPage = 1;
        UpdatePagination();
    }

    private Dictionary
<
string, string> GetUniqueCustomers()
    {
        return cashSales
            .Where(s => s.CustomerId.HasValue && !string.IsNullOrEmpty(s.CustomerName))
            .GroupBy(s => s.CustomerId)
            .ToDictionary(g => g.Key.ToString(), g => g.First().CustomerName);
    }

    private void ViewSale(int saleId)
    {
        Navigation.NavigateTo($"/payments/receipt/print/{saleId}");
    }

    private async Task CancelSale(int saleId)
    {
        if (confirm("Are you sure you want to cancel this cash sale?"))
        {
            try
            {
                // TODO: Implement cancel payment method in PaymentService
                // await PaymentService.CancelPaymentAsync(saleId);
                await LoadCashSales();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error cancelling cash sale: {ex.Message}");
            }
        }
    }

    private bool confirm(string message)
    {
        // TODO: Implement proper confirmation dialog
        return true;
    }

    private string GetMethodColor(PaymentMethod method)
    {
        return method switch
        {
            PaymentMethod.Cash => "success",
            PaymentMethod.CreditCard => "primary",
            PaymentMethod.Check => "info",
            PaymentMethod.BankTransfer => "warning",
            PaymentMethod.Other => "secondary",
            _ => "secondary"
        };
    }

    private string GetStatusColor(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Completed => "success",
            PaymentStatus.Pending => "warning",
            PaymentStatus.Failed => "danger",
            PaymentStatus.Cancelled => "secondary",
            _ => "secondary"
        };
    }
}
