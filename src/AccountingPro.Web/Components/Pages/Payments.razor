@page "/payments"
@using AccountingPro.Application.DTOs
@using AccountingPro.Application.Services
@inject IPaymentService PaymentService
@inject ICompanyContextService CompanyContext
@inject NavigationManager Navigation

<PageTitle>Payments - AccountingPro</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2>Payments & Receipts</h2>
        </div>
        <div class="col-auto">
            <a href="/payments/receipt/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> New Receipt
            </a>
        </div>
    </div>

    @if (_isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!_payments.Any())
    {
        <div class="card">
            <div class="card-body text-center py-5">
                <i class="bi bi-receipt" style="font-size: 3rem; color: #ccc;"></i>
                <h5 class="mt-3">No payments recorded</h5>
                <p class="text-muted">Start by creating a payment receipt</p>
                <a href="/payments/receipt/create" class="btn btn-primary">
                    Create Payment Receipt
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Payment #</th>
                                <th>Customer</th>
                                <th>Invoice #</th>
                                <th>Method</th>
                                <th>Amount</th>
                                <th>Status</th>
                                <th>Reference</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in _payments)
                            {
                                <tr>
                                    <td>@payment.PaymentDate.ToString("yyyy-MM-dd")</td>
                                    <td>
                                        <strong>@payment.PaymentNumber</strong>
                                    </td>
                                    <td>@payment.CustomerName</td>
                                    <td>@payment.InvoiceNumber</td>
                                    <td>
                                        <span class="badge bg-secondary">@payment.PaymentMethod.ToString()</span>
                                    </td>
                                    <td class="text-end">
                                        <strong>@payment.Amount.ToString("C")</strong>
                                    </td>
                                    <td>
                                        @switch (payment.Status)
                                        {
                                            case Core.Enums.PaymentStatus.Completed:
                                                <span class="badge bg-success">Completed</span>
                                                break;
                                            case Core.Enums.PaymentStatus.Pending:
                                                <span class="badge bg-warning">Pending</span>
                                                break;
                                            case Core.Enums.PaymentStatus.Failed:
                                                <span class="badge bg-danger">Failed</span>
                                                break;
                                            case Core.Enums.PaymentStatus.Cancelled:
                                                <span class="badge bg-secondary">Cancelled</span>
                                                break;
                                        }
                                    </td>
                                    <td>@payment.Reference</td>
                                    <td>
                                        <a href="/payments/receipt/print/@payment.Id" class="btn btn-sm btn-outline-primary me-1" title="Print Receipt">
                                            <i class="bi bi-printer"></i>
                                        </a>
                                        <button class="btn btn-sm btn-outline-danger" 
                                                @onclick="() => DeletePayment(payment.Id)"
                                                title="Delete">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h6 class="text-muted">Total Payments</h6>
                        <h3>@_payments.Count</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h6 class="text-muted">Total Received</h6>
                        <h3 class="text-success">@_payments.Sum(p => p.Amount).ToString("C")</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h6 class="text-muted">This Month</h6>
                        <h3>@_payments.Count(p => p.PaymentDate.Month == DateTime.Now.Month && p.PaymentDate.Year == DateTime.Now.Year)</h3>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<PaymentDto> _payments = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await CompanyContext.InitializeAsync();
        
        if (CompanyContext.CurrentCompanyId.HasValue)
        {
            await LoadPayments();
        }
        
        _isLoading = false;
    }

    private async Task LoadPayments()
    {
        if (CompanyContext.CurrentCompanyId.HasValue)
        {
            _payments = await PaymentService.GetPaymentsByCompanyAsync(CompanyContext.CurrentCompanyId.Value);
        }
    }

    private async Task DeletePayment(int id)
    {
        if (confirm("Are you sure you want to delete this payment?"))
        {
            await PaymentService.DeletePaymentAsync(id);
            await LoadPayments();
        }
    }

    private bool confirm(string message)
    {
        // In a real app, use a modal dialog
        return true;
    }
}
