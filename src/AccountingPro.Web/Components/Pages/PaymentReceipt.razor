@page "/payments/receipt/create"
@using AccountingPro.Application.DTOs
@using AccountingPro.Application.Services
@using AccountingPro.Core.Enums
@inject IPaymentService PaymentService
@inject ICompanyContextService CompanyContext
@inject ICustomerService CustomerService
@inject IInvoiceService InvoiceService
@inject NavigationManager Navigation

<PageTitle>Create Payment Receipt - AccountingPro</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2>Create Payment Receipt</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/payments">Payments</a></li>
                    <li class="breadcrumb-item active">New Receipt</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @_errorMessage
            <button type="button" class="btn-close" @onclick="() => _errorMessage = null"></button>
        </div>
    }

    <EditForm Model="_payment" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Payment Details</h5>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">Payment Date <span class="text-danger">*</span></label>
                        <InputDate @bind-Value="_payment.PaymentDate" class="form-control" />
                        <ValidationMessage For="() => _payment.PaymentDate" />
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Customer</label>
                        <InputSelect @bind-Value="_payment.CustomerId" class="form-select" @onchange="OnCustomerChanged">
                            <option value="">-- Select Customer --</option>
                            @foreach (var customer in _customers)
                            {
                                <option value="@customer.Id">@customer.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Invoice</label>
                        <InputSelect @bind-Value="_payment.InvoiceId" class="form-select" @onchange="OnInvoiceChanged">
                            <option value="">-- Select Invoice (Optional) --</option>
                            @foreach (var invoice in _customerInvoices)
                            {
                                <option value="@invoice.Id">@invoice.InvoiceNumber - Balance: @invoice.BalanceAmount.ToString("C")</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Amount <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <InputNumber @bind-Value="_payment.Amount" class="form-control" step="0.01" />
                        </div>
                        <ValidationMessage For="() => _payment.Amount" />
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Payment Method <span class="text-danger">*</span></label>
                        <InputSelect @bind-Value="_payment.Method" class="form-select">
                            <option value="@PaymentMethod.Cash">Cash</option>
                            <option value="@PaymentMethod.Check">Check</option>
                            <option value="@PaymentMethod.CreditCard">Credit Card</option>
                            <option value="@PaymentMethod.BankTransfer">Bank Transfer</option>
                            <option value="@PaymentMethod.PayPal">PayPal</option>
                            <option value="@PaymentMethod.Other">Other</option>
                        </InputSelect>
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Reference</label>
                        <InputText @bind-Value="_payment.Reference" class="form-control" placeholder="Check number, transaction ID, etc." />
                    </div>

                    <div class="col-12">
                        <label class="form-label">Notes</label>
                        <InputTextArea @bind-Value="_payment.Notes" class="form-control" rows="3" />
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-primary" disabled="@_isSaving">
                @if (_isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save Payment</span>
                }
            </button>
            <a href="/payments" class="btn btn-secondary ms-2">Cancel</a>
        </div>
    </EditForm>
</div>

@code {
    private CreatePaymentReceiptDto _payment = new();
    private List<CustomerDto> _customers = new();
    private List<InvoiceDto> _customerInvoices = new();
    private bool _isSaving;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CompanyContext.InitializeAsync();
            
            if (CompanyContext.CurrentCompanyId.HasValue)
            {
                _customers = await CustomerService.GetCustomersByCompanyIdAsync(CompanyContext.CurrentCompanyId.Value);
            }
            else
            {
                _errorMessage = "No company selected. Please select a company first.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading page: {ex.Message}";
        }
    }

    private async Task OnCustomerChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var customerId) && customerId > 0)
        {
            _payment.CustomerId = customerId;
            
            if (CompanyContext.CurrentCompanyId.HasValue)
            {
                var allInvoices = await InvoiceService.GetInvoicesByCompanyIdAsync(CompanyContext.CurrentCompanyId.Value);
                _customerInvoices = allInvoices
                    .Where(i => i.CustomerId == customerId && i.BalanceAmount > 0)
                    .ToList();
            }
        }
        else
        {
            _payment.CustomerId = null;
            _customerInvoices.Clear();
        }
        
        _payment.InvoiceId = null;
        StateHasChanged();
    }

    private void OnInvoiceChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var invoiceId) && invoiceId > 0)
        {
            _payment.InvoiceId = invoiceId;
            var invoice = _customerInvoices.FirstOrDefault(i => i.Id == invoiceId);
            if (invoice != null)
            {
                _payment.Amount = invoice.BalanceAmount;
            }
        }
        else
        {
            _payment.InvoiceId = null;
        }
    }

    private async Task HandleSubmit()
    {
        if (!CompanyContext.CurrentCompanyId.HasValue)
        {
            _errorMessage = "No company selected";
            return;
        }

        _isSaving = true;
        _errorMessage = null;

        try
        {
            var payment = await PaymentService.CreatePaymentAsync(_payment, CompanyContext.CurrentCompanyId.Value);
            // Navigate to print receipt page
            Navigation.NavigateTo($"/payments/receipt/print/{payment.Id}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error creating payment: {ex.Message}";
        }
        finally
        {
            _isSaving = false;
        }
    }
}
