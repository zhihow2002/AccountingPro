@page "/accounting/opening-balance"
@using AccountingPro.Application.DTOs
@using AccountingPro.Application.Services
@using AccountingPro.Core.Enums
@inject IBalanceSheetService BalanceSheetService
@inject ICompanyContextService CompanyContext
@inject NavigationManager Navigation

<PageTitle>Opening Balance Sheet - AccountingPro</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2>Opening Balance Sheet</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/accounts">Chart of Accounts</a></li>
                    <li class="breadcrumb-item active">Opening Balance</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @_successMessage
            <button type="button" class="btn-close" @onclick="() => _successMessage = null"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @_errorMessage
            <button type="button" class="btn-close" @onclick="() => _errorMessage = null"></button>
        </div>
    }

    <EditForm Model="_openingBalance" OnValidSubmit="HandleSubmit">
        <div class="card mb-3">
            <div class="card-header">
                <h5 class="mb-0">Opening Balance Date</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label">As of Date <span class="text-danger">*</span></label>
                        <InputDate @bind-Value="_openingBalance.AsOfDate" class="form-control" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Fixed Assets -->
        <div class="card mb-3">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Fixed Assets</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th style="width: 150px;">Account Code</th>
                                <th>Account Name</th>
                                <th style="width: 200px;">Amount</th>
                                <th style="width: 80px;">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var (item, index) in _openingBalance.FixedAssets.Select((x, i) => (x, i)))
                            {
                                <tr>
                                    <td>
                                        <InputSelect @bind-Value="item.AccountCode" class="form-select" @onchange="@((ChangeEventArgs e) => OnAccountSelected(e, item, index, _openingBalance.FixedAssets))">
                                            <option value="">-- Select --</option>
                                            @foreach (var template in _templates.Where(t => t.Category == "Fixed Assets"))
                                            {
                                                <option value="@template.AccountCode">@template.AccountCode - @template.AccountName</option>
                                            }
                                        </InputSelect>
                                    </td>
                                    <td>
                                        <InputText @bind-Value="item.AccountName" class="form-control" placeholder="Account name" />
                                    </td>
                                    <td>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <InputNumber @bind-Value="item.Amount" class="form-control" step="0.01" />
                                        </div>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveItem(_openingBalance.FixedAssets, index)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => AddFixedAsset()">
                    <i class="bi bi-plus-circle"></i> Add Fixed Asset
                </button>
            </div>
        </div>

        <!-- Current Assets -->
        <div class="card mb-3">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">Current Assets</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th style="width: 150px;">Account Code</th>
                                <th>Account Name</th>
                                <th style="width: 200px;">Amount</th>
                                <th style="width: 80px;">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var (item, index) in _openingBalance.CurrentAssets.Select((x, i) => (x, i)))
                            {
                                <tr>
                                    <td>
                                        <InputSelect @bind-Value="item.AccountCode" class="form-select" @onchange="@((ChangeEventArgs e) => OnAccountSelected(e, item, index, _openingBalance.CurrentAssets))">
                                            <option value="">-- Select --</option>
                                            @foreach (var template in _templates.Where(t => t.Category == "Current Assets"))
                                            {
                                                <option value="@template.AccountCode">@template.AccountCode - @template.AccountName</option>
                                            }
                                        </InputSelect>
                                    </td>
                                    <td>
                                        <InputText @bind-Value="item.AccountName" class="form-control" placeholder="Account name" />
                                    </td>
                                    <td>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <InputNumber @bind-Value="item.Amount" class="form-control" step="0.01" />
                                        </div>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveItem(_openingBalance.CurrentAssets, index)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <button type="button" class="btn btn-sm btn-outline-info" @onclick="() => AddCurrentAsset()">
                    <i class="bi bi-plus-circle"></i> Add Current Asset
                </button>
                <div class="mt-3 text-end">
                    <strong>Total Current Assets: </strong>
                    <span class="h5">@_openingBalance.CurrentAssets.Sum(a => a.Amount).ToString("C")</span>
                </div>
            </div>
        </div>

        <!-- Current Liabilities -->
        <div class="card mb-3">
            <div class="card-header bg-warning text-dark">
                <h5 class="mb-0">Current Liabilities</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th style="width: 150px;">Account Code</th>
                                <th>Account Name</th>
                                <th style="width: 200px;">Amount</th>
                                <th style="width: 80px;">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var (item, index) in _openingBalance.CurrentLiabilities.Select((x, i) => (x, i)))
                            {
                                <tr>
                                    <td>
                                        <InputSelect @bind-Value="item.AccountCode" class="form-select" @onchange="@((ChangeEventArgs e) => OnAccountSelected(e, item, index, _openingBalance.CurrentLiabilities))">
                                            <option value="">-- Select --</option>
                                            @foreach (var template in _templates.Where(t => t.Category == "Current Liabilities"))
                                            {
                                                <option value="@template.AccountCode">@template.AccountCode - @template.AccountName</option>
                                            }
                                        </InputSelect>
                                    </td>
                                    <td>
                                        <InputText @bind-Value="item.AccountName" class="form-control" placeholder="Account name" />
                                    </td>
                                    <td>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <InputNumber @bind-Value="item.Amount" class="form-control" step="0.01" />
                                        </div>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveItem(_openingBalance.CurrentLiabilities, index)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <button type="button" class="btn btn-sm btn-outline-warning" @onclick="() => AddCurrentLiability()">
                    <i class="bi bi-plus-circle"></i> Add Current Liability
                </button>
                <div class="mt-3 text-end">
                    <strong>Total Current Liabilities: </strong>
                    <span class="h5">@_openingBalance.CurrentLiabilities.Sum(l => l.Amount).ToString("C")</span>
                </div>
                <div class="mt-2 text-end bg-light p-2">
                    <strong>Net Current Assets / (Liabilities): </strong>
                    <span class="h5">@((_openingBalance.CurrentAssets.Sum(a => a.Amount) - _openingBalance.CurrentLiabilities.Sum(l => l.Amount)).ToString("C"))</span>
                </div>
            </div>
        </div>

        <!-- Capital Account -->
        <div class="card mb-3">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">Capital Account</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th style="width: 150px;">Account Code</th>
                                <th>Account Name</th>
                                <th style="width: 200px;">Amount</th>
                                <th style="width: 80px;">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var (item, index) in _openingBalance.CapitalAccount.Select((x, i) => (x, i)))
                            {
                                <tr>
                                    <td>
                                        <InputSelect @bind-Value="item.AccountCode" class="form-select" @onchange="@((ChangeEventArgs e) => OnAccountSelected(e, item, index, _openingBalance.CapitalAccount))">
                                            <option value="">-- Select --</option>
                                            @foreach (var template in _templates.Where(t => t.Category == "Capital Account"))
                                            {
                                                <option value="@template.AccountCode">@template.AccountCode - @template.AccountName</option>
                                            }
                                        </InputSelect>
                                    </td>
                                    <td>
                                        <InputText @bind-Value="item.AccountName" class="form-control" placeholder="Account name" />
                                    </td>
                                    <td>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <InputNumber @bind-Value="item.Amount" class="form-control" step="0.01" />
                                        </div>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveItem(_openingBalance.CapitalAccount, index)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                            <tr class="table-secondary">
                                <td colspan="2"><strong>Less: Drawings</strong></td>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <InputNumber @bind-Value="_openingBalance.Drawings" class="form-control" step="0.01" />
                                    </div>
                                </td>
                                <td></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <button type="button" class="btn btn-sm btn-outline-success" @onclick="() => AddCapitalAccount()">
                    <i class="bi bi-plus-circle"></i> Add Capital Account
                </button>
                <div class="mt-3 text-end bg-light p-3">
                    <div class="mb-2">
                        <strong>Total Capital & Reserves: </strong>
                        <span class="h5">@_openingBalance.CapitalAccount.Sum(c => c.Amount).ToString("C")</span>
                    </div>
                    <div class="mb-2">
                        <strong>Less: Drawings: </strong>
                        <span class="h5 text-danger">(@_openingBalance.Drawings.ToString("C"))</span>
                    </div>
                    <hr />
                    <div>
                        <strong>Net Capital: </strong>
                        <span class="h4 text-success">@((_openingBalance.CapitalAccount.Sum(c => c.Amount) - _openingBalance.Drawings).ToString("C"))</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Summary -->
        <div class="card mb-3 border-primary">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Balance Sheet Summary</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Assets</h6>
                        <table class="table table-sm">
                            <tr>
                                <td>Fixed Assets:</td>
                                <td class="text-end">@_openingBalance.FixedAssets.Sum(a => a.Amount).ToString("C")</td>
                            </tr>
                            <tr>
                                <td>Current Assets:</td>
                                <td class="text-end">@_openingBalance.CurrentAssets.Sum(a => a.Amount).ToString("C")</td>
                            </tr>
                            <tr class="fw-bold">
                                <td>Total Assets:</td>
                                <td class="text-end">@(_openingBalance.FixedAssets.Sum(a => a.Amount) + _openingBalance.CurrentAssets.Sum(a => a.Amount)).ToString("C")</td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6>Liabilities & Capital</h6>
                        <table class="table table-sm">
                            <tr>
                                <td>Current Liabilities:</td>
                                <td class="text-end">@_openingBalance.CurrentLiabilities.Sum(l => l.Amount).ToString("C")</td>
                            </tr>
                            <tr>
                                <td>Capital & Reserves:</td>
                                <td class="text-end">@_openingBalance.CapitalAccount.Sum(c => c.Amount).ToString("C")</td>
                            </tr>
                            <tr>
                                <td>Less: Drawings:</td>
                                <td class="text-end text-danger">(@_openingBalance.Drawings.ToString("C"))</td>
                            </tr>
                            <tr class="fw-bold">
                                <td>Total Liabilities & Capital:</td>
                                <td class="text-end">@(_openingBalance.CurrentLiabilities.Sum(l => l.Amount) + _openingBalance.CapitalAccount.Sum(c => c.Amount) - _openingBalance.Drawings).ToString("C")</td>
                            </tr>
                        </table>
                    </div>
                </div>
                @{
                    var totalAssets = _openingBalance.FixedAssets.Sum(a => a.Amount) + _openingBalance.CurrentAssets.Sum(a => a.Amount);
                    var totalLiabilitiesCapital = _openingBalance.CurrentLiabilities.Sum(l => l.Amount) + _openingBalance.CapitalAccount.Sum(c => c.Amount) - _openingBalance.Drawings;
                    var difference = totalAssets - totalLiabilitiesCapital;
                }
                @if (Math.Abs(difference) > 0.01m)
                {
                    <div class="alert alert-warning mt-3">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>Balance Sheet not balanced!</strong>
                        Difference: @difference.ToString("C")
                        <br />
                        <small>Assets must equal Liabilities + Capital</small>
                    </div>
                }
                else
                {
                    <div class="alert alert-success mt-3">
                        <i class="bi bi-check-circle"></i>
                        <strong>Balance Sheet is balanced!</strong>
                    </div>
                }
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Notes</label>
            <InputTextArea @bind-Value="_openingBalance.Notes" class="form-control" rows="3" />
        </div>

        <div class="mb-3">
            <button type="submit" class="btn btn-primary btn-lg" disabled="@_isSaving">
                @if (_isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save Opening Balances</span>
                }
            </button>
            <a href="/accounts" class="btn btn-secondary btn-lg ms-2">Cancel</a>
        </div>
    </EditForm>
</div>

@code {
    private OpeningBalanceSheetDto _openingBalance = new();
    private List<BalanceSheetAccountTemplateDto> _templates = new();
    private bool _isSaving;
    private string? _successMessage;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CompanyContext.InitializeAsync();
            
            if (!CompanyContext.CurrentCompanyId.HasValue)
            {
                _errorMessage = "No company selected. Please select a company first.";
                return;
            }

            _templates = await BalanceSheetService.GetBalanceSheetTemplatesAsync();
            
            // Try to load existing opening balances
            var existing = await BalanceSheetService.GetOpeningBalancesAsync(CompanyContext.CurrentCompanyId.Value);
            if (existing != null)
            {
                _openingBalance = existing;
            }
            else
            {
                // Initialize with empty items
                _openingBalance.AsOfDate = new DateTime(DateTime.Today.Year, 1, 1);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading page: {ex.Message}";
        }
    }

    private void AddFixedAsset()
    {
        _openingBalance.FixedAssets.Add(new BalanceSheetEntryDto { AccountType = AccountType.Asset });
    }

    private void AddCurrentAsset()
    {
        _openingBalance.CurrentAssets.Add(new BalanceSheetEntryDto { AccountType = AccountType.Asset });
    }

    private void AddCurrentLiability()
    {
        _openingBalance.CurrentLiabilities.Add(new BalanceSheetEntryDto { AccountType = AccountType.Liability });
    }

    private void AddCapitalAccount()
    {
        _openingBalance.CapitalAccount.Add(new BalanceSheetEntryDto { AccountType = AccountType.Equity });
    }

    private void RemoveItem(List<BalanceSheetEntryDto> list, int index)
    {
        list.RemoveAt(index);
    }

    private void OnAccountSelected(ChangeEventArgs e, BalanceSheetEntryDto item, int index, List<BalanceSheetEntryDto> list)
    {
        var code = e.Value?.ToString();
        if (!string.IsNullOrEmpty(code))
        {
            var template = _templates.FirstOrDefault(t => t.AccountCode == code);
            if (template != null)
            {
                item.AccountCode = template.AccountCode;
                item.AccountName = template.AccountName;
                item.AccountType = template.AccountType;
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (!CompanyContext.CurrentCompanyId.HasValue)
        {
            _errorMessage = "No company selected";
            return;
        }

        // Validate balance sheet is balanced
        var totalAssets = _openingBalance.FixedAssets.Sum(a => a.Amount) + _openingBalance.CurrentAssets.Sum(a => a.Amount);
        var totalLiabilitiesCapital = _openingBalance.CurrentLiabilities.Sum(l => l.Amount) + _openingBalance.CapitalAccount.Sum(c => c.Amount) - _openingBalance.Drawings;
        
        if (Math.Abs(totalAssets - totalLiabilitiesCapital) > 0.01m)
        {
            _errorMessage = "Balance sheet must be balanced! Assets must equal Liabilities + Capital.";
            return;
        }

        _isSaving = true;
        _errorMessage = null;
        _successMessage = null;

        try
        {
            await BalanceSheetService.CreateOpeningBalancesAsync(_openingBalance, CompanyContext.CurrentCompanyId.Value);
            _successMessage = "Opening balances saved successfully! Accounts have been created in the Chart of Accounts.";
            
            // Optionally redirect after a delay
            await Task.Delay(2000);
            Navigation.NavigateTo("/accounts");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error saving opening balances: {ex.Message}";
        }
        finally
        {
            _isSaving = false;
        }
    }
}
