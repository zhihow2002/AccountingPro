@page "/suppliers"
@using AccountingPro.Application.DTOs
@using AccountingPro.Core.Enums
@using AccountingPro.Application.Services
@inject ICountryService CountryService

<PageTitle>Suppliers - AccountingPro</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Supplier Management</h1>
    <button class="btn btn-primary" @onclick="OpenCreateModal">
        <i class="fas fa-plus"></i> Add Supplier
    </button>
</div>

<div class="row mb-3">
    <div class="col-md-4">
        <input type="text" class="form-control" placeholder="Search suppliers..." @bind="searchText" @oninput="FilterSuppliers" />
    </div>
    <div class="col-md-2">
        <select class="form-control" @bind="selectedStatus">
            <option value="">All Status</option>
            <option value="Active">Active</option>
            <option value="Inactive">Inactive</option>
            <option value="Suspended">Suspended</option>
        </select>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Company Name</th>
                <th>Contact Person</th>
                <th>Email</th>
                <th>Phone</th>
                <th>City</th>
                <th>Outstanding Balance</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredSuppliers.Any())
            {
                @foreach (var supplier in filteredSuppliers)
                {
                    <tr>
                        <td>@supplier.CompanyName</td>
                        <td>@supplier.ContactPerson</td>
                        <td>@supplier.Email</td>
                        <td>@supplier.Phone</td>
                        <td>@supplier.City</td>
                        <td>
                            <span class="@(supplier.OutstandingBalance > 0 ? "text-warning" : "text-success")">
                                @supplier.OutstandingBalance.ToString("C")
                            </span>
                        </td>
                        <td>
                            <span class="badge badge-@GetStatusClass(supplier.Status)">
                                @supplier.Status
                            </span>
                        </td>
                        <td>
                            <div class="btn-group" role="group" aria-label="Supplier actions">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditSupplier(supplier)" title="Edit Supplier">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteSupplier(supplier.Id)" title="Delete Supplier">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="8" class="text-center text-muted">No suppliers found</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Create/Edit Supplier Modal -->
@if (showModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Edit Supplier" : "Add New Supplier")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Company Name *</label>
                                <input type="text" class="form-control" @bind="currentSupplier.CompanyName" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Contact Person</label>
                                <input type="text" class="form-control" @bind="currentSupplier.ContactPerson" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" @bind="currentSupplier.Email" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Phone</label>
                                <input type="text" class="form-control" @bind="currentSupplier.Phone" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Address</label>
                        <input type="text" class="form-control" @bind="currentSupplier.Address" />
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">City</label>
                                <input type="text" class="form-control" @bind="currentSupplier.City" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">State</label>
                                <input type="text" class="form-control" @bind="currentSupplier.State" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Zip Code</label>
                                <input type="text" class="form-control" @bind="currentSupplier.ZipCode" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Country</label>
                                <select class="form-control" @bind="currentSupplier.Country">
                                    <option value="">Select a country...</option>
                                    @foreach (var country in countries)
                                    {
                                        <option value="@country.Code">@country.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Tax ID</label>
                                <input type="text" class="form-control" @bind="currentSupplier.TaxId" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Payment Terms</label>
                                <select class="form-control" @bind="currentSupplier.PaymentTerms">
                                    <option value="Net30">Net 30</option>
                                    <option value="Net15">Net 15</option>
                                    <option value="Net60">Net 60</option>
                                    <option value="COD">Cash on Delivery</option>
                                    <option value="Prepaid">Prepaid</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Status</label>
                                <select class="form-control" @bind="currentSupplier.Status">
                                    <option value="@SupplierStatus.Active">Active</option>
                                    <option value="@SupplierStatus.Inactive">Inactive</option>
                                    <option value="@SupplierStatus.Suspended">Suspended</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveSupplier" disabled="@string.IsNullOrWhiteSpace(currentSupplier.CompanyName)">
                            Save Supplier
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<SupplierDto> suppliers = new();
    private List<SupplierDto> filteredSuppliers = new();
    private List<CountryDto> countries = new();
    private SupplierDto currentSupplier = new();
    private bool showModal = false;
    private bool isEditing = false;
    private string searchText = "";
    private string selectedStatus = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCountries();
        // Initialize with sample data
        suppliers = new List<SupplierDto>
        {
            new SupplierDto
            {
                Id = 1,
                CompanyName = "TechCorp Solutions",
                ContactPerson = "John Smith",
                Email = "john@techcorp.com",
                Phone = "(555) 123-4567",
                Address = "123 Tech Street",
                City = "San Francisco",
                State = "CA",
                ZipCode = "94105",
                Country = "USA",
                TaxId = "12-3456789",
                PaymentTerms = "Net30",
                OutstandingBalance = 2500.00m,
                Status = SupplierStatus.Active
            },
            new SupplierDto
            {
                Id = 2,
                CompanyName = "Office Supplies Inc",
                ContactPerson = "Sarah Johnson",
                Email = "sarah@officesupplies.com",
                Phone = "(555) 987-6543",
                Address = "456 Business Ave",
                City = "New York",
                State = "NY",
                ZipCode = "10001",
                Country = "USA",
                TaxId = "98-7654321",
                PaymentTerms = "Net15",
                OutstandingBalance = 0.00m,
                Status = SupplierStatus.Active
            },
            new SupplierDto
            {
                Id = 3,
                CompanyName = "Global Manufacturing",
                ContactPerson = "Mike Davis",
                Email = "mike@globalmanuf.com",
                Phone = "(555) 456-7890",
                Address = "789 Industrial Blvd",
                City = "Chicago",
                State = "IL",
                ZipCode = "60601",
                Country = "USA",
                TaxId = "45-6789012",
                PaymentTerms = "Net60",
                OutstandingBalance = 8750.50m,
                Status = SupplierStatus.Active
            }
        };
        
        filteredSuppliers = suppliers.ToList();
    }

    private void OpenCreateModal()
    {
        currentSupplier = new SupplierDto { Status = SupplierStatus.Active, PaymentTerms = "Net30", Country = "USA" };
        isEditing = false;
        showModal = true;
    }

    private void EditSupplier(SupplierDto supplier)
    {
        currentSupplier = new SupplierDto
        {
            Id = supplier.Id,
            CompanyName = supplier.CompanyName,
            ContactPerson = supplier.ContactPerson,
            Email = supplier.Email,
            Phone = supplier.Phone,
            Address = supplier.Address,
            City = supplier.City,
            State = supplier.State,
            ZipCode = supplier.ZipCode,
            Country = supplier.Country,
            TaxId = supplier.TaxId,
            PaymentTerms = supplier.PaymentTerms,
            OutstandingBalance = supplier.OutstandingBalance,
            Status = supplier.Status
        };
        isEditing = true;
        showModal = true;
    }

    private async Task LoadCountries()
    {
        try
        {
            countries = await CountryService.GetAllCountriesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading countries: {ex.Message}");
            countries = new List<CountryDto>();
        }
    }

    private void CloseModal()
    {
        showModal = false;
        currentSupplier = new SupplierDto();
    }

    private async Task SaveSupplier()
    {
        if (string.IsNullOrWhiteSpace(currentSupplier.CompanyName))
            return;

        if (isEditing)
        {
            var existingSupplier = suppliers.FirstOrDefault(s => s.Id == currentSupplier.Id);
            if (existingSupplier != null)
            {
                existingSupplier.CompanyName = currentSupplier.CompanyName;
                existingSupplier.ContactPerson = currentSupplier.ContactPerson;
                existingSupplier.Email = currentSupplier.Email;
                existingSupplier.Phone = currentSupplier.Phone;
                existingSupplier.Address = currentSupplier.Address;
                existingSupplier.City = currentSupplier.City;
                existingSupplier.State = currentSupplier.State;
                existingSupplier.ZipCode = currentSupplier.ZipCode;
                existingSupplier.Country = currentSupplier.Country;
                existingSupplier.TaxId = currentSupplier.TaxId;
                existingSupplier.PaymentTerms = currentSupplier.PaymentTerms;
                existingSupplier.Status = currentSupplier.Status;
            }
        }
        else
        {
            currentSupplier.Id = suppliers.Count > 0 ? suppliers.Max(s => s.Id) + 1 : 1;
            suppliers.Add(currentSupplier);
        }

        FilterSuppliers();
        CloseModal();
    }

    private void DeleteSupplier(int id)
    {
        suppliers.RemoveAll(s => s.Id == id);
        FilterSuppliers();
    }

    private void FilterSuppliers()
    {
        filteredSuppliers = suppliers.Where(s =>
            (string.IsNullOrEmpty(searchText) || 
             s.CompanyName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             s.ContactPerson?.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true ||
             s.Email?.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true) &&
            (string.IsNullOrEmpty(selectedStatus) || s.Status.ToString() == selectedStatus)
        ).ToList();
    }

    private string GetStatusClass(SupplierStatus status)
    {
        return status switch
        {
            SupplierStatus.Active => "success",
            SupplierStatus.Inactive => "secondary",
            SupplierStatus.Suspended => "danger",
            _ => "warning"
        };
    }
}
