@page "/trial-balance"
@using AccountingPro.Application.Services
@using AccountingPro.Application.DTOs
@inject IReportService ReportService
@inject ICompanyContextService CompanyContext

<PageTitle>Trial Balance</PageTitle>

<section class="trial-balance">
    <header class="header">
        <div>
            <h1>Trial Balance</h1>
            <p class="subtitle">Company: @CurrentCompanyName</p>
        </div>
        <div class="filters">
            <InputDate @bind-Value="_asOfDate" class="form-control" />
            <button class="btn btn-primary" @onclick="LoadTrialBalance" disabled="@_isLoading">
                @_isLoading ? "Loading..." : "Refresh"
            </button>
        </div>
    </header>

    <div class="summary-cards">
        <div class="card">
            <span class="label">Total Debit</span>
            <span class="value text-success">@_summary.TotalDebit.ToString("C")</span>
        </div>
        <div class="card">
            <span class="label">Total Credit</span>
            <span class="value text-primary">@_summary.TotalCredit.ToString("C")</span>
        </div>
        <div class="card">
            <span class="label">Difference</span>
            <span class="value @(Math.Abs(_summary.Difference) < 0.01m ? "text-success" : "text-danger")">
                @_summary.Difference.ToString("C")
            </span>
        </div>
    </div>

    <div class="table-responsive shadow-sm">
        <table class="table table-striped table-hover">
            <thead class="table-light">
                <tr>
                    <th style="width: 20%">Account Code</th>
                    <th>Account Name</th>
                    <th class="text-end" style="width: 20%">Debit</th>
                    <th class="text-end" style="width: 20%">Credit</th>
                </tr>
            </thead>
            <tbody>
                @if (_summary.Entries.Any())
                {
                    @foreach (var entry in _summary.Entries)
                    {
                        <tr>
                            <td class="fw-semibold">@entry.AccountCode</td>
                            <td>@entry.AccountName</td>
                            <td class="text-end">@entry.Debit.ToString("C")</td>
                            <td class="text-end">@entry.Credit.ToString("C")</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="text-center text-muted py-4">
                            No transactions found for the selected period.
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot class="table-secondary">
                <tr>
                    <th colspan="2" class="text-end">Totals</th>
                    <th class="text-end">@_summary.TotalDebit.ToString("C")</th>
                    <th class="text-end">@_summary.TotalCredit.ToString("C")</th>
                </tr>
            </tfoot>
        </table>
    </div>
</section>

@code {
    private TrialBalanceSummaryDto _summary = new();
    private DateTime? _asOfDate = DateTime.Today;
    private bool _isLoading;
    private string CurrentCompanyName { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await CompanyContext.InitializeAsync();
        CurrentCompanyName = CompanyContext.CurrentCompany?.Name ?? "-";
        await LoadTrialBalance();
    }

    private async Task LoadTrialBalance()
    {
        if (_isLoading)
        {
            return;
        }

        _isLoading = true;
        try
        {
            _summary = await ReportService.GetTrialBalanceAsync(_asOfDate);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trial balance: {ex.Message}");
            _summary = new TrialBalanceSummaryDto();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}

<style>
    .trial-balance {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        padding: 1rem 0;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .subtitle {
        margin: 0;
        color: #6c757d;
    }

    .filters {
        display: flex;
        gap: 0.75rem;
        align-items: center;
    }

    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: 1rem;
    }

    .summary-cards .card {
        padding: 1rem;
        border-radius: 0.75rem;
        border: 1px solid #e9ecef;
        background: #fff;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .summary-cards .label {
        font-size: 0.85rem;
        text-transform: uppercase;
        color: #6c757d;
        letter-spacing: 0.05em;
    }

    .summary-cards .value {
        font-size: 1.25rem;
        font-weight: 600;
    }

    @@media (max-width: 576px) {
        .filters {
            flex-direction: column;
            align-items: stretch;
        }
    }
</style>